// Данное решение хоть и работает правильно, но оно плохо своей скоростью, да и сама идея объединять прямоугольники - безумна

#include <iostream>
#include <vector>
#include <algorithm>
#include <list>
#include <sstream>
#include <iterator>

using namespace std;

void test(string str) {
  string* str1 = new string(str);
  istringstream* iss = new istringstream(*str1);
  cin.rdbuf(iss->rdbuf());
}

typedef int64_t bint;

struct Rect
{
	Rect(int x, int y, int sx, int sy, int count) : x(x), y(y), sx(sx), sy(sy), count(count) {}

	int x, y;
	int sx, sy;

	int count;

	bool isInsideX(int xtest) { return x < xtest && xtest < x+sx; }
	bool isInsideY(int ytest) { return y < ytest && ytest < y+sy; }

	bool operator==(const Rect& b) {
		return x == b.x && y == b.y && sx == b.sx && sy == b.sy;
	}
};

bool isIntersect(const Rect& a, const Rect& b) {
	return min(a.x+a.sx, b.x+b.sx) > max(a.x, b.x) && min(a.y+a.sy, b.y+b.sy) > max(a.y, b.y);
	//return !(a.x+a.sx<b.x || b.x+b.sx<a.x || a.y+a.sy<b.y || b.y+b.sy<a.y);
}

template<class T>
void erase_duplicates(T& vec) {
	sort(vec.begin(), vec.end());
	vec.erase(unique(vec.begin(), vec.end()), vec.end());
}

int max_input = 0;

list<Rect> intersectRects(const list<Rect>& rects, const Rect& r) {
	max_input = rects.size();

	// Все rects надо порезать r
	// r надо порезать всеми линиями от rects
	// Надо перебрать все, полученные из r и искать их в rects. Если не нашли, то просто добавляем в массив
	// Разрезать прямоугольник линией по оси Х

	auto cut_by_x = [] (const Rect& a, int x) -> list<Rect> {
		Rect a1(a.x, a.y, x-a.x, a.sy, a.count);
		Rect a2(x, a.y, a.x+a.sx-x, a.sy, a.count);
		return {a1, a2};
	};

	// Разрезать прямоугольник линией по оси У
	auto cut_by_y = [] (const Rect& a, int y) -> list<Rect> {
		Rect a1(a.x, a.y, a.sx, y-a.y, a.count);
		Rect a2(a.x, y, a.sx, a.y+a.sy-y, a.count);
		return {a1, a2};
	};

	auto cut_by_masx_rect = [cut_by_x] (Rect r, const vector<int>& xmas, int start) -> list<Rect> {
		list<Rect> result;
		for (int i = start; i < xmas.size(); ++i) {
			if (r.isInsideX(xmas[i])) {
				auto res = cut_by_x(r, xmas[i]);
				result.push_back(res.front());
				r = res.back();
			} else {
				break;
			}
		}
		result.push_back(r);
		return result;
	};

	auto cut_by_masy_rect = [cut_by_y] (Rect r, const vector<int>& ymas, int start) -> list<Rect> {
		list<Rect> result;
		for (int i = start; i < ymas.size(); ++i) {
			if (r.isInsideY(ymas[i])) {
				auto res = cut_by_y(r, ymas[i]);
				result.push_back(res.front());
				r = res.back();
			} else {
				break;
			}
		}
		result.push_back(r);
		return result;
	};

	auto cut_by_masx = [cut_by_x, cut_by_masx_rect] (list<Rect>& result, const vector<int>& xmas) {
		if (xmas.empty())
			return;

		list<Rect> appendResult;
		for (auto i = result.begin(); i != result.end(); ++i) {
			start:
			if (i == result.end()) break;
			for (int j = 0; j < xmas.size(); j++) {
				if (i->isInsideX(xmas[j])) {
					auto res = cut_by_masx_rect(*i, xmas, j);
					appendResult.insert(appendResult.end(), res.begin(), res.end());
					i = result.erase(i);
					goto start;
				}
			}
		}
		result.insert(result.end(), appendResult.begin(), appendResult.end());
	};

	auto cut_by_masy = [cut_by_y, cut_by_masy_rect] (list<Rect>& result, const vector<int>& ymas) {
		if (ymas.empty())
			return;
		list<Rect> appendResult;
		for (auto i = result.begin(); i != result.end(); ++i) {
			start:
			if (i == result.end())
				break;
			for (int j = 0; j < ymas.size(); j++) {
				if (i->isInsideY(ymas[j])) {
					auto res = cut_by_masy_rect(*i, ymas, j);
					appendResult.insert(appendResult.end(), res.begin(), res.end());
					i = result.erase(i);
					goto start;
				}
			}
		}
		result.insert(result.end(), appendResult.begin(), appendResult.end());
	};

	auto make_mas_x = [] (const list<Rect>& r) -> vector<int> {
		vector<int> result;
		for (auto& i : r) {
			result.push_back(i.x);
			result.push_back(i.x+i.sx);
		}

		// Удаляем одинаковые разрезающие линии
		erase_duplicates(result);
		return result;
	};

	auto make_mas_y = [] (const list<Rect>& r) -> vector<int> {
		vector<int> result;
		for (auto& i : r) {
			result.push_back(i.y);
			result.push_back(i.y+i.sy);
		}

		// Удаляем одинаковые разрезающие линии
		erase_duplicates(result);
		return result;
	};

	list<Rect> newRects, newR;
	newRects.insert(newRects.end(), rects.begin(), rects.end());
	newR.push_back(r);

	auto rects_x = make_mas_x(newRects);
	auto rects_y = make_mas_y(newRects);

	cut_by_masx(newR, rects_x);
	cut_by_masy(newR, rects_y);

	// Такой порядок очень важен, а то может получиться так, что мы не объединим некоторые прямоугольники
	auto r_x = make_mas_x(newR);
	auto r_y = make_mas_y(newR);

	cut_by_masx(newRects, r_x);
	cut_by_masy(newRects, r_y);

	list<Rect> newToAdd;

	for (auto i = newR.begin(); i != newR.end(); ++i) {
		for (auto j = newRects.begin(); j != newRects.end(); ++j) {
			// На эту строчку тратится 80% времени
			if (*i == *j) {
				j->count += i->count;
				goto next;
			}
		}
		newToAdd.push_back(*i);
		next:;
	}

	newRects.insert(newRects.end(), newToAdd.begin(), newToAdd.end());

	return newRects;
}

int main() {
	//test("6 4 2\n0 0 4 3\n2 1 4 3\n");
	//test("10 10 10\n0 4 2 1\n6 3 4 1\n0 9 9 1\n9 6 1 3\n7 4 2 4\n0 6 7 1\n9 1 1 5\n4 6 1 4\n1 8 3 2\n2 1 7 5\n");
	//test("100 100 100\n86 81 6 13\n40 95 23 5\n88 42 3 53\n60 57 38 35\n86 15 2 73\n84 33 11 19\n42 80 26 16\n14 30 80 11\n17 11 78 74\n74 21 19 72\n9 55 69 30\n2 62 36 38\n74 46 24 23\n4 1 54 53\n18 11 20 54\n51 60 41 24\n49 2 38 49\n64 10 3 59\n43 20 44 23\n57 98 11 2\n44 45 2 38\n41 51 7 8\n56 39 29 39\n97 12 2 44\n72 16 5 84\n88 87 4 9\n39 24 60 64\n25 27 72 15\n86 44 3 4\n57 15 8 84\n92 57 8 11\n46 43 37 18\n81 26 11 31\n82 25 17 43\n11 39 26 11\n54 26 42 22\n44 43 44 31\n96 32 4 39\n99 17 1 26\n93 7 2 90\n57 66 2 34\n71 54 11 28\n52 58 46 8\n87 1 6 66\n67 64 27 2\n66 14 12 43\n33 99 29 1\n19 60 52 2\n23 32 46 60\n23 90 45 10\n6 16 1 32\n37 74 44 26\n73 40 17 18\n26 13 22 38\n31 53 46 34\n12 71 37 27\n95 90 5 6\n41 55 26 35\n7 91 91 5\n14 97 10 2\n30 43 65 46\n97 33 3 7\n2 16 56 59\n24 85 60 6\n75 8 11 44\n80 13 12 16\n97 85 1 6\n16 79 25 8\n42 6 25 65\n79 62 20 24\n13 84 46 5\n99 73 1 6\n13 62 65 3\n54 63 37 7\n87 73 11 4\n11 41 84 14\n87 21 4 15\n43 9 32 13\n13 80 30 20\n60 31 8 17\n32 0 16 54\n4 22 77 62\n28 25 59 5\n80 81 10 14\n90 29 4 56\n46 35 43 3\n8 61 85 29\n29 82 40 11\n55 57 37 5\n19 40 15 40\n42 48 52 10\n27 48 25 17\n31 62 4 12\n93 41 6 58\n22 18 36 36\n30 5 35 44\n69 24 16 17\n1 38 52 32\n11 71 32 29\n45 59 42 25\n");
	//test("1000000 1000000 1000\n481643 812586 371248 75210\n233529 308739 327268 210886\n858068 956769 32733 11770\n821749 691480 49283 146188\n957731 401851 22948 59755\n381911 567561 326033 328264\n432946 984463 50372 11320\n130719 366468 502217 131048\n887618 879412 83644 77478\n685128 839148 34030 14120\n524132 56815 60256 494619\n43660 522528 761462 78645\n575248 654718 41050 180383\n58172 30772 249159 885955\n285100 957102 692279 10685\n219908 698431 136013 148252\n379031 23767 238836 919940\n947203 633982 41642 43404\n293778 455122 406619 177138\n440939 3072 399973 907622\n188238 924120 124444 36119\n269826 55318 108563 809448\n614864 830194 137645 123624\n870791 859007 112137 116419\n882460 635021 17089 7261\n137910 853888 187511 137531\n866012 978058 30636 13233\n455005 939451 257861 17077\n241666 57938 46128 278651\n545131 698353 100879 97648\n875087 527770 40906 55256\n276589 60680 179256 408390\n587251 750065 182698 201428\n857690 695543 109936 101795\n706614 212033 178962 229903\n826676 545629 69649 306889\n357052 75364 312704 751593\n798179 572082 56625 78783\n413248 821668 84966 108808\n526417 100497 314780 724399\n730266 793870 4262 145310\n496815 667225 213521 181737\n285430 726478 421006 91110\n88365 930006 453116 23061\n125929 652058 664257 70015\n574321 434940 270984 8572\n469496 258528 208313 26710\n550737 162368 362974 507703\n547357 804656 254160 6409\n529830 696900 83972 209087\n651026 940236 184057 4286\n982908 947471 1637 25385\n324631 815347 327021 161453\n340541 463451 152343 158458\n157278 629 198415 238138\n274555 388315 722098 75275\n918546 983057 64002 4807\n368506 464230 504961 229861\n473461 70129 289702 589618\n907517 ""564891 2984 227138\n162786 909428 595587 66606\n678159 933573 85473 5574\n573645 266174 373286 388342\n461456 940309 223642 15682\n944850 404360 8447 595552\n161731 812032 96180 161728\n15719 55180 394596 255491\n913252 596925 33642 238777\n968369 713419 2389 104639\n676924 259996 143738 728885\n717482 701833 200606 30512\n588703 270426 397960 388974\n654858 287488 237884 358506\n411738 32408 211947 339388\n794692 850989 147755 92831\n532675 995163 79752 4725\n878366 283140 68217 536238\n864809 50144 79193 650513\n959458 168179 11448 382553\n101968 12403 243994 736049\n87608 867746 561627 82760\n907690 884650 16676 107964\n353126 724746 369000 227342\n540325 821923 207911 128629\n531179 733343 105000 81481\n709595 219535 194090 471958\n701702 4380 162185 242492\n750038 900394 62187 77921\n579291 974377 225236 17038\n379609 544890 42826 452250\n102491 624870 354436 52542\n479709 759850 75197 33029\n715881 560051 263867 162177\n788438 966135 7553 29398\n199404 10839 739801 893519\n340951 937090 122532 28482\n475960 788145 129251 119899\n286553 787368 244505 209717\n664314 230250 68169 65217\n824625 528279 21923 444292\n859852 406164 73953 112822\n971675 880160 28151 73481\n938680 667297 28547 122691\n620828 165719 247510 137991\n438948 942177 372596 39989\n513207 578579 414252 391295\n217342 942430 551235 32135\n763064 950972 10295 32904\n885836 982210 4962 16630\n409414 995933 284106 2424\n794293 633486 129034 226967\n321843 973938 247840 12995\n577486 37670 272850 849207\n864176 433438 58221 159359\n555183 599163 432650 11723\n175849 435663 700605 557401\n623850 794400 181656 131300\n122262 717977 663559 124941\n461121 68301 483521 819635\n951312 231724 29538 187002\n576969 205716 414868 576169\n305196 160999 560671 379562\n553566 762183 169468 192692\n23288 451810 410172 196598\n783394 639559 215611 190113\n491004 726842 191552 234782\n281683 202761 302646 634503\n536168 548923 153047 145905\n992493 729241 3396 262673\n454961 124698 371996 405135\n987451 30536 1068 349085\n338374 945735 277703 506\n648350 538640 33874 143831\n236319 79225 574593 782776\n829384 121192 75705 90022\n739672 11072 238521 4592\n432222 56143 464305 277538\n999534 449818 422 362403\n957047 532555 23195 215244\n641790 16252 186676 330489\n783034 412015 32008 586532\n452597 18208 47701 896640\n976843 602149 3260 132791\n680987 580076 230704 410005\n114307 80409 821797 259537\n127978 125680 8525 173581\n634971 437630 129478 395776\n539234 291930 95995 575755\n600058 107762 127742 292349\n863547 918701 75329 33659\n969004 904489 9833 37955\n309070 569900 675528 162136\n809377 563612 65987 244981\n88394 238903 189587 500311\n402239 948993 216723 764\n663503 383375 125862 422334\n393813 327615 444767 385429\n260675 395520 83420 118241\n528363 513843 147730 108651\n808477 612390 170353 25223\n459922 977734 483039 21724\n945770 646954 39303 127505\n899792 662047 92735 309077\n556144 537078 333119 271101\n530455 632291 1678 360890\n836188 404482 19051 246460""\n450781 150554 18134 488050\n925677 984480 63092 12259\n59531 297485 522002 481764\n488989 398412 377710 449302\n602877 372556 267436 375606\n470102 198277 338850 794737\n763333 727598 164019 47994\n608818 908007 89535 5101\n861438 480530 72723 413092\n613937 150187 168122 777844\n813170 135569 159744 223594\n982034 64740 1737 123494\n893149 256713 40452 344612\n731048 517667 253825 121792\n511092 41732 396611 189813\n291446 672691 128270 49596\n68603 499604 767780 4233\n873572 943924 16805 25386\n937080 758121 49422 80917\n343255 380802 6075 432568\n630959 560991 104452 154578\n529430 765250 152649 80701\n536776 272335 131614 416374\n338969 237397 412395 107130\n954539 703497 8641 143043\n240409 88180 196332 865523\n123792 925886 461369 72108\n732209 609219 243489 50915\n32482 112624 548699 648188\n389654 828924 379693 51897\n175213 480559 389038 312308\n659800 560715 38688 307361\n134256 644979 328979 227128\n190746 526819 370787 256833\n302522 333811 159244 402075\n238698 351463 465584 601555\n363086 153833 343758 191527\n670277 893410 247564 13390\n81403 886702 282210 86090\n616498 657232 110995 193005\n812165 826868 157532 15103\n229225 269491 724177 369392\n654441 24340 147876 54485\n600611 18550 25823 808469\n868997 544125 31199 230658\n20991 887374 28788 27126\n894155 254379 59099 226702\n219601 698333 722869 194663\n44387 665235 756252 137867\n512793 524332 340233 44521\n214290 34060 449352 623937\n465478 694980 280626 19172\n822048 483468 158529 37383\n419081 783456 314908 200258\n797463 597824 39105 392060\n711138 635499 82633 348503\n98059 782642 10333 203312\n227172 652824 240316 119660\n845793 144555 44979 844266\n315470 383467 530763 122798\n729376 495499 130440 371380\n807481 853908 43550 38120\n123149 866586 538708 122070\n331257 723486 255765 160044\n747999 615796 138066 262349\n683524 589626 264474 69445\n172512 546186 187492 124584\n491780 555154 309669 184165\n822457 993899 43582 1316\n153503 549928 125812 109886""\n556434 750525 360277 89957\n38459 395987 12893 73875\n762099 712885 56843 200887\n835590 92531 84779 126819\n659817 312772 191735 179570\n627328 951681 286641 27445\n257266 200369 68712 269762\n478018 166816 221993 165030\n467170 303726 67351 649623\n777399 475096 29109 407602\n532777 104272 239418 697678\n316223 909646 395501 65952\n478249 105718 290001 751851\n986307 887330 8447 68138\n981374 244232 1925 633402\n303476 676050 448763 192842\n287598 40860 165636 510133\n966130 582651 12273 77094\n182008 787095 595922 111362\n439254 990256 141180 3388\n621963 362585 324775 237310\n610995 584555 82378 240892\n686903 521648 297951 255042\n371777 292674 297180 605986\n459983 917144 265308 22816\n677143 46541 246597 853917\n743367 371100 169050 125285\n158813 93766 139215 898186\n992461 755699 1630 229861\n816942 271989 180182 511823\n829096 652663 144408 154386\n631027 829184 299955 151913\n314047 871790 43265 66940\n498960 976408 335936 13576\n598791 963509 252334 8754\n925833 12550 31227 585694\n356150 960505 348134 24333\n76548 532157 36739 87953\n932856 788252 29965 5184\n201581 319312 211239 622274\n558157 769387 391105 66192\n30693 643387 477052 5725\n85222 640703 312946 306637\n643057 744393 277420 208715\n231637 251822 67871 501670\n288478 196864 578316 627964\n832006 875077 98992 88784\n530142 645996 175653 98937\n698938 714748 205245 44627\n127385 134003 490798 617251\n468347 524653 282232 207178\n190058 186350 441368 153344\n11043 629720 784087 351677\n230981 594050 481180 146668\n956601 103275 19748 139545\n54133 781449 459607 95994\n266862 62621 113267 870178\n62656 620762 645981 37027\n689378 375568 62800 476957\n666008 376940 197667 402283\n330140 400789 468678 539543\n853154 424081 7122 60408\n89042 320443 182051 16384\n678986 406827 211430 407450\n38742 91630 162436 115760\n31855 616627 121800 149624\n940560 695208 15478 260724\n391876 861879 422820 80064\n511444 809361 403292 124553\n81784 585488 538140 349344\n14125 49607 827413 705395\n420917 665050 242432 94641\n716939 515275 205243 278416\n207958 464394 486156 382162\n274982 309384 695917 109081\n163700 193083 596292 183302\n625158 620183 192169 330299\n581352 5285 253330 450859\n505559 326200 56026 661839\n777360 383593 215819 169827\n276561 977830 100178 19435\n136797 120906 320856 41362\n195561 111962 304369 685922\n625628 428124 254230 469535""\n336595 612104 77655 310602\n152385 549021 594346 320942\n910161 271829 6183 642070\n351083 631551 607485 328432\n340021 684350 581696 58670\n54609 836410 85431 82491\n248480 465615 506573 250835\n626924 832713 308768 12954\n647119 292269 227839 116958\n266538 168628 90308 604857\n276632 426819 699092 495784\n52087 489945 659716 287676\n175810 486971 356363 482903\n546738 493212 347395 253488\n521738 612802 264122 265917\n874956 231808 10595 59496\n444203 991384 130411 507\n985898 770895 8812 39267\n561225 153844 398951 531208\n869969 225397 58796 587564\n769648 110054 67627 124551\n400333 886348 318241 17492\n525837 145467 305133 558639\n616374 436354 327074 25265\n342090 888992 276826 6739\n255308 637153 430515 146923\n862120 260986 52402 290355\n583975 138642 262186 255256\n160638 793718 769798 157786\n938230 944777 41826 30807\n460688 80729 287441 772585\n127376 971115 484323 3607\n301261 864412 199630 133009\n804633 391461 98314 80629\n531943 888662 130041 15515\n506296 137802 281378 333839\n515251 347177 239029 537049\n519232 87682 51247 362476\n211877 862909 472886 23934\n104177 737679 248626 233730\n705968 255179 26944 535946\n852943 649237 72310 269799\n290492 784626 165286 10676\n666945 537767 17172 149249\n510797 145781 159079 666462\n478017 732362 316134 57162\n757818 888386 186263 105110\n791446 328647 5906 533232\n611123 386825 168531 153979\n46168 850368 509586 129584\n855469 723921 76915 202810\n854724 57025 106105 635670\n811351 277128 125222 692798\n412500 497339 242631 489394\n649541 878054 337053 117624\n880137 549984 117194 432846\n756309 438694 106846 157234\n104389 800441 247831 131795\n611530 459165 359230 407842\n200199 871033 287013 90380\n158019 94989 109772 465464\n664867 69922 127942 105829\n973837 459772 15740 90821\n888623 569694 109804 131453\n746192 570318 248300 178761\n618580 450246 217304 5998\n411 3351 346723 950140\n572609 658891 330548 265556\n519199 260951 387784 580264\n419611 463411 172363 368308\n56930 324660 288846 435336\n198865 108602 618321 37293\n473290 619244 4164 239831\n892737 942824 8819 40468\n525268 119463 243968 582490\n723056 428429 149875 180015\n686365 823068 203523 111056\n763156 200727 209815 226020\n273341 291909 260944 208123\n143964 925104 695140 66793\n231545 305029 368893 662562\n650987 143526 309146 493651\n178738 98764 213430 270505""\n949504 635461 48645 229113\n783486 991336 207475 3256\n459687 144132 150574 233278\n733369 725123 95065 165154\n583724 788292 234701 127060\n307418 622096 297790 157975\n948385 587808 34271 223754\n937297 72539 28150 616199\n940847 585726 19715 264258\n328579 730599 342716 41119\n966852 436247 14324 49280\n26349 207481 214200 733765\n786987 284943 211448 279191\n534955 659715 461664 111413\n205490 545302 540359 88975\n327377 415413 294945 226322\n695198 614286 101108 56949\n391847 718658 165569 240020\n277859 411181 457341 512963\n189974 342557 317270 487103\n367812 738095 477840 170855\n79888 58488 119097 264690\n592996 5867 175985 778682\n50484 314755 783589 377872\n997747 44974 884 393532\n875766 72352 66343 63386\n12695 139526 111158 106505\n26403 121557 133806 758038\n153624 939210 700686 35823\n659562 786145 104603 136164\n484849 50582 285727 366457\n286269 488970 572870 492175\n585931 81872 361658 133129\n950343 979614 42961 6024\n204079 687521 509119 293844\n945902 5663 13781 468770\n868433 569455 82842 47909\n486890 235967 457631 161672\n737715 755504 243195 201755\n517705 148036 377184 446195\n336886 149483 356652 803341\n248133 992434 686147 1317\n74073 532405 356671 454522\n146485 366896 589615 303375\n795853 83207 105656 657171\n859317 691366 66996 108011\n189995 661822 329902 65891\n52399 39953 737001 53804\n905462 115934 57052 704088\n467820 310196 118839 604268\n656865 455642 12765 519582\n850764 919836 9718 29727\n64697 448028 27433 239831\n630489 65245 245506 603404\n673269 187879 246531 476156\n585150 717751 50451 9631\n754651 329160 16335 20496\n763420 894387 2689 51292\n859901 641547 8399 144699\n654165 521728 172641 129210\n596705 36464 52486 582334\n10622 343256 421034 551808\n451526 957955 67545 11771\n555660 636994 129236 340905\n334032 3080 133083 519998\n853258 34564 89131 164424\n436662 543673 323692 451282\n5297 260732 986104 112030\n688680 484376 308085 282916\n587609 517238 9691 198607\n903606 226360 55815 623140""\n771238 731425 212748 59868\n350698 120833 45220 572413\n321896 977594 282703 12596\n429065 959831 95752 18757\n768660 436610 193151 107492\n966600 971608 19749 2024\n647389 742161 123945 210602\n979582 788437 12619 132629\n455539 801933 217280 139685\n613677 351688 246569 573409\n191089 340269 671109 469126\n67475 427464 111550 359426\n349529 556548 418081 207091\n391439 388230 510500 489190\n140164 858711 494852 85980\n769328 252848 154897 398576\n359597 790002 68268 131697\n560759 462472 374792 224134\n798367 950456 201574 31031\n141963 880174 3269 26353\n622541 723726 176374 116874\n145701 151001 201153 57146\n963070 599442 20869 302408\n776170 29706 25771 910370\n668767 296185 116425 195290\n320863 492489 45516 450192\n703278 225763 198397 341425\n388525 212532 402147 204734\n854902 355593 143067 29387\n785584 248468 83142 156767\n554543 39291 295811 923546\n897399 98304 65747 693099\n835321 61464 157691 793793\n528686 726336 423741 35591\n656706 580207 247088 386184\n482372 794476 351358 154254\n941775 305082 52407 292267\n43710 69533 145984 391075\n908428 142892 66201 241338\n828427 105702 169799 541027\n584962 899968 251373 32717\n254969 811888 544845 24185\n456532 855944 211353 29586\n528712 467819 342261 404494\n360506 913524 12497 51222\n198240 220224 581236 597144\n908807 537264 85480 178521\n3407 617488 300597 210766\n590551 114781 137156 515556\n188815 351723 401998 84203\n573778 771497 410897 42906\n680637 947280 284740 23229\n416668 962861 537288 33979\n86161 397339 371689 219814\n175018 839871 345052 114926\n874539 345510 15703 549146\n554320 837891 274016 67102\n132844 143819 495365 7520\n417956 889653 10791 47090\n256180 537182 63338 445013\n645677 496740 343384 20406\n696422 386720 141116 118493\n708048 970236 118938 10386\n933470 777862 16989 50708\n646338 124999 224027 737404\n332454 477656 205448 142522\n391609 912283 302339 17238\n378800 979990 67437 12764\n754720 456725 17668 205249\n376385 84612 88941 153419\n373049 421613 442554 94050\n736433 222307 19850 497797\n634305 790270 285390 27513\n903735 242405 60558 127293\n188975 696275 526304 238163\n889773 268334 89771 532696\n861678 769549 82195 109867\n705834 877548 250596 68785\n982378 465847 8277 486529\n771773 145157 122425 144727\n836971 856852 91656 84247\n199586 977377 587584 11591\n827652 904006 32544 65287\n435676 358481 156784 67178\n607201 977824 118205 21442\n628084 598565 347467 303789\n938387 218678 9169 342133\n772709 718231 90064 12347\n159858 479634 795757 17131\n706131 225882 155302 684554\n35449 81908 626085 736152\n688724 171773 39237 516729\n188021 364980 246550 504174\n844229 569532 84306 102626\n922592 805444 50327 190842\n828575 296211 126787 77010\n507759 145006 256089 817410\n411312 244905 234642 287933\n449352 416626 512893 318626\n949471 132432 3438 665090\n92628 524904 226723 193711\n414591 602297 116841 234775\n938418 708762 6795 262315\n575740 547563 23643 334459\n342303 539673 193409 250289\n651522 170008 74081 782779\n966396 922320 11580 33217\n638099 995040 104566 3920\n737412 883527 233252 35370\n46343 331875 662629 604962\n945418 929924 962 49232\n134577 497896 697167 452792\n360900 192194 130296 331038\n838363 524314 18603 438878\n312320 306752 303496 341266\n257700 771985 706838 215105\n419829 320166 94728 470590\n659283 752055 236082 2586\n844844 388607 92830 441180\n152385 510034 685329 229550\n116741 442808 58915 248455\n791167 879135 198767 25757\n768436 965660 229562 25398\n890543 202557 70902 138304\n977698 74245 6306 753945\n334622 113365 161358 539825\n499300 193446 282873 362753\n926014 393493 56987 486593""\n498214 972832 188436 22139\n705283 506322 44860 266929\n368369 950176 583486 34560\n760704 953303 28688 29993\n740846 424866 192785 44942\n227313 994126 103446 20\n200302 457855 756998 324052\n314180 502041 196888 186707\n195426 189064 194206 744206\n827028 832868 80977 78782\n922034 742026 34777 99177\n189590 548882 687343 246310\n73562 922667 656761 38756\n649593 692093 201475 155213\n838954 372153 98978 155347\n559718 554489 99730 385959\n663093 548832 167846 257906\n711925 202172 234856 724411\n956717 272524 6757 353035\n548085 749432 367762 163225\n609714 400607 204572 234671\n793132 785935 150052 107747\n614091 737289 30394 119501\n218278 220721 712663 286421\n515513 579714 349486 269302\n50686 276500 791796 630451\n107410 800931 485954 75063\n535988 89686 443597 81493\n558367 963170 281636 5861\n30331 835000 70976 144732\n823481 994863 169026 5007\n123415 360382 604581 470756\n360866 788560 619815 204753\n28080 173027 583866 275559\n566536 652768 123149 344524\n241504 348281 733728 341765\n781287 989235 196078 2747\n583008 752546 140616 168396\n506518 844194 403312 8698\n318951 859434 509408 105007\n111232 808435 14401 143181\n119913 987630 54074 4767\n362436 304499 377805 262596\n550897 80994 285475 436712\n27518 433144 188028 76061\n463875 434591 82021 343950\n451346 289259 253398 130696\n355751 544910 9189 321795\n904793 537075 83875 200479\n332079 219917 270168 619119\n927794 511167 64457 136145\n159972 959650 108881 17170\n208540 342076 22402 582794\n666086 613794 94549 261323\n655448 407882 102016 491846\n525777 877555 14032 100102\n290237 885472 335555 1584\n200026 202585 114493 643994\n28653 399691 200472 571920\n541919 874478 205380 61719\n159644 36329 819638 13178\n516606 128455 19827 253619\n253923 204327 580165 735359\n923836 573836 20403 21411\n481578 75145 512342 253873\n486880 115792 115707 5266\n198956 220703 686618 207602\n407409 330443 79835 522904\n959535 804383 27153 95745\n902209 15914 29428 159207\n844458 181770 118197 814711\n424964 218922 508197 355248\n131812 156145 409030 393890\n886207 173847 549 36228\n810832 969390 154119 9058\n271302 774619 643870 208135\n69606 996651 897516 401\n902826 778430 14385 103178\n774226 826489 97093 52940\n355894 229797 374220 754826\n336939 402335 89238 150172\n859313 667947 125882 260891\n799567 627158 136018 347795\n201196 5016 711318 69489\n298181 836418 649950 70065\n254261 764311 411641 83289\n8115 5465 686927 59392\n743805 699706 176252 174482\n388400 834683 586503 143656\n640035 632325 23098 147680\n101889 178973 287293 226331\n99813 215211 238071 603668\n936011 360202 444 332360\n303704 152676 505353 485202\n850345 781201 36389 186822\n975400 835043 1031 16473\n939201 97581 33101 330749\n46052 21511 410010 651533\n772252 524434 74343 35805\n444425 276322 140876 573808\n740997 923336 32041 29409\n692778 168481 85202 196010\n108910 386335 16594 527037\n389178 210317 260368 210724\n137091 220024 290341 1741\n670793 897953 238069 93322\n930400 341073 52007 513483\n826252 650484 22275 200631\n527633 450243 53307 28623\n711337 658279 117510 263371\n820251 308694 46304 456067\n2889 570968 275878 241088\n98177 59578 846088 211032\n939855 251335 7345 631158\n200178 209206 362482 278127""\n421258 498059 236979 230103\n258133 444599 245707 521486\n97467 374192 501365 299645\n812942 565747 34041 157243\n640351 63440 327860 336630\n64396 185289 637234 624618\n712288 903801 182458 26580\n328132 269806 572355 366654\n205076 55377 277795 304350\n899222 799176 40471 112119\n239768 337742 353103 479465\n504070 459384 204055 202250\n69355 760012 188635 32816\n297596 93770 201808 213843\n816967 642798 136568 126569\n810432 54902 115789 782221\n522307 53377 130762 717129\n216286 859788 362764 117943\n661857 353319 40464 469914\n720822 957108 73314 10848\n492342 260057 105056 420377\n67113 715148 190808 31706\n768068 113491 117178 227323\n53038 47250 708193 176131\n726940 636806 55070 163689\n185649 653893 128523 72533\n297135 361517 333777 602905\n974107 560655 13339 377775\n380194 493234 534267 278912\n847960 42682 115634 772708\n848842 162429 149571 86099\n354563 206453 508693 487720\n605461 934797 394427 5479\n755431 811910 16449 157704\n102235 997374 243281 1853\n240268 260257 104235 153433\n598344 645366 351943 198526\n185260 197482 274491 549130\n876259 394518 74474 14060\n664396 55027 286943 85693\n573380 860273 144546 5493\n560941 431130 45850 323280\n425980 23541 257241 830562\n771697 54950 129423 556243\n25230 782084 491724 154546\n330223 228333 287566 314824\n597892 315455 83541 247062\n210060 44034 137491 45130\n142370 180302 113393 311481\n921442 97888 50786 150846\n540939 307945 61434 111919\n749343 486320 228740 421890\n827627 13265 172027 870609\n550576 145807 341769 294738\n430927 930836 251199 16979\n223373 743513 278207 97965\n849489 400931 106595 354286\n922734 186895 51548 754027\n135612 337236 145440 14766\n94509 267626 596389 81713\n402894 386448 318428 120745\n46045 291739 473765 705827\n419844 787168 550607 210833\n656471 400985 324237 477670\n949721 751878 15699 86449\n778104 321166 199390 434951\n346122 70646 488251 198269\n977550 738179 5625 42756\n272200 329845 613238 560870\n210228 161428 265285 467714\n904299 711652 16418 39091\n237828 676536 206450 237626\n393397 370831 44014 215573\n955395 310223 14875 56375\n487875 892553 435651 104804\n545039 283291 8650 488556\n536630 785765 332888 69975\n558394 106915 259310 704014\n415978 754480 259372 16316\n149616 763007 342623 158688\n799776 12072 164173 599395\n665622 907907 69519 88592\n996377 760862 1265 75969\n310755 360501 8761 397135\n692640 489884 184090 230605\n958130 944244 7379 15974\n783634 284263 200497 143803\n866110 267015 124801 531318\n489650 181086 89629 436455\n463348 412293 8610 369506\n577860 756428 139412 194257\n757865 269522 115629 40525\n741770 823104 96530 116704\n164071 950839 594727 42059\n835839 533460 135119 177919\n981254 6989 1798 724265\n828750 624181 141800 48733\n184878 479743 128512 145853\n473841 970212 459970 6009\n613995 378700 204049 319419\n806725 871175 88742 5541""\n893204 272379 59891 392050\n469630 320090 369736 632241\n589209 634684 265975 208549\n660560 600887 328844 53355\n441498 347869 486231 170876\n665445 93464 62191 175740\n76637 509754 223027 224111\n4843 308971 571850 76068\n547844 52861 378074 526961\n63384 289213 618203 614681\n782616 227770 150243 648022\n322744 303332 366492 9132\n409918 394933 42849 277639\n577 197118 377343 642098\n86488 366938 422201 607661\n78552 239987 852381 212985\n60052 537389 21643 281129\n764730 412410 16540 89481\n687830 5809 149658 435133\n402327 346734 520642 505175\n968613 228429 1483 470590\n236357 115776 83621 310121\n675301 36416 152571 671085\n827040 700162 135988 162701\n302726 410898 543250 462654\n280306 933442 178756 66393\n324634 920329 520725 79255\n717707 939885 112187 44471\n495825 688867 499770 264502\n192766 315133 35423 646704\n427888 672299 533436 238669\n942528 373853 18693 618426\n219573 936781 105318 62678\n567629 85759 213159 32155\n980051 49712 5691 300318\n344750 114734 414786 651039\n639003 730127 72424 37289\n708900 936112 101845 63096\n367017 834828 226270 100426\n1044 520064 54923 456315\n595085 783358 313888 169182\n804937 405984 33576 243586\n195868 956091 699653 6282\n29857 727853 581626 85224\n39279 196981 85802 170563\n173232 187071 230476 230435\n586919 147355 257933 624820\n728293 884991 9273 52903\n994732 334494 3798 373610\n339540 852093 614544 34466\n558002 790555 416497 157672\n66040 206807 894486 506980\n235302 44311 434905 768435\n430754 842578 442617 64231\n504591 491731 96113 334229\n781572 439323 148919 174302\n921965 410084 11575 410206\n6911 38134 966886 180049\n266502 856290 480001 54995\n244768 525958 164204 180190\n189621 985248 403164 10091\n316264 230063 19988 117149\n556945 312928 25166 582506\n658087 272896 154356 86292\n108783 631426 740462 241769\n58485 262371 595275 145437\n70697 381540 499557 355284\n188179 394872 132526 592198\n274310 813892 339595 148203\n941824 997790 57863 1530\n380852 996168 85701 2660""\n981333 125805 9877 868606\n404844 535720 163010 284763\n695115 561465 98060 406632\n352996 300331 396798 653998\n692503 454767 296420 88368\n149682 78168 487656 778206\n804936 655121 34498 38280\n636813 138941 99915 53659\n123954 938267 189081 58332\n852441 543954 25029 297552\n120978 549902 249218 320851\n492265 540711 225094 294631\n384506 59889 615125 870622\n32193 976343 526779 21367\n552307 684904 84466 236235\n358865 162900 626088 465575\n286361 259310 573263 307186\n84496 668391 75330 49261\n285147 311515 29378 412940\n794652 860652 72269 36820\n211792 535361 572624 268062\n139542 349019 25920 96093\n393966 312669 237921 115154\n355284 419897 189285 555784\n573373 727341 181950 63518\n737416 28599 146259 695635\n977607 850850 14353 107490\n935248 944520 7027 38373\n332974 924444 358814 62221\n436413 399605 234809 562776\n229187 655683 16004 265754\n275806 914744 574477 73768\n17921 83017 25934 61724\n434169 118974 298085 161399\n978366 10372 12966 285698\n708082 309444 61993 310368\n204156 700930 664182 128852\n881967 470089 61574 92082\n310708 489140 2597 41755\n7837 785168 436858 13505\n57586 775686 662289 191168\n918114 41201 21085 205183\n397635 354736 509082 274909\n800288 127941 45786 802070\n443319 571316 316012 246440\n80181 362422 904443 349286\n561352 852637 331883 139263\n115207 445075 155155 107211\n570064 536453 99361 432210\n606687 360132 208980 104270\n443445 620562 18481 200052\n624952 95624 140073 165291\n259881 84024 472502 399843\n217497 865433 768951 93547\n792403 154925 60386 55333\n284599 312456 70677 654927\n179379 651939 702433 91831\n896836 296862 32296 58493\n39984 404715 126175 273605\n329217 456051 619052 253333\n479157 573835 356855 13290\n806662 738835 188640 184025\n553772 535941 62469 209645\n69253 465854 817528 69968\n521770 80646 166353 894543\n239648 109644 217409 857430\n770969 555225 90820 361506\n734003 523061 97341 160420\n232045 825151 450267 124277\n627309 67609 54375 410760\n676239 151345 229891 306276\n156869 861292 11749 79637\n526359 441 444204 248462\n108200 949866 201618 18526\n287904 722128 185297 69868\n342299 162918 638383 25708\n169994 803641 182367 47932\n879534 167591 60677 378048\n934748 907306 19366 8186\n399582 925036 484027 68194\n541291 822405 131385 130277\n585213 117375 94635 249059\n599072 216806 169537 708933\n807395 894460 18923 54176\n180717 679352 156402 113263\n641575 769832 248961 82577\n496762 483687 157928 103724\n653093 137776 336476 312874\n915979 350535 59668 337653\n876496 237066 55021 40145\n575489 937537 273823 41397\n744731 598497 165100 16176\n809061 783452 173294 155965""\n734136 452919 71279 422051\n127809 927654 206534 7345\n803553 27258 123582 448722\n246875 59992 744993 429453\n184315 578351 519449 397890\n233855 138281 595862 606684\n124803 31867 537403 869641\n836922 273534 63900 631766\n230191 249701 484004 347434\n82434 938687 359763 58177\n267 343971 248999 359656\n308452 183734 287582 558930\n609295 189904 334433 186898\n146627 963933 415059 21491\n675180 564063 210047 41825\n313618 338533 181619 350590\n635427 759443 84255 239878\n431260 526141 212952 116394\n");

	list<Rect> rects;

	bint w, h, k;
	cin >> w >> h >> k;
	for (int i = 0; i < k; ++i) {
		//cout << i << " " << rects.size() << " " << max_input << endl;
		max_input = 0;
		bint x, y, sx, sy;
		cin >> x >> y >> sx >> sy;
		Rect newRect(x, y, sx, sy, 1);
		list<Rect> unionRects;

		auto j = rects.begin();
		while (j != rects.end()) {
			bool ispp = true;
			while (j != rects.end() && isIntersect(*j, newRect)) {
				unionRects.push_back(*j);
				j = rects.erase(j);
				ispp = false;
			}
			if (ispp) j++;
		}

		auto newRes = intersectRects(unionRects, newRect);
		rects.insert(rects.end(), newRes.begin(), newRes.end());
	}

	vector<int> result(k+1);
	result[0] = w * h;
	for (auto& i : rects) {
		result[0] -= i.sx * i.sy;
		result[i.count] += i.sx * i.sy;
	}

	//cout << "Size: " << rects.size() << endl;

	for (int i = 0; i < result.size(); ++i) {
		cout << i << " " << result[i] << endl;
	}

	//system("pause");
}